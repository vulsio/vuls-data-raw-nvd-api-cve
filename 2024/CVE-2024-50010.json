{
	"id": "CVE-2024-50010",
	"sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
	"vulnStatus": "Received",
	"published": "2024-10-21T19:15:04.523",
	"lastModified": "2024-10-21T19:15:04.523",
	"descriptions": [
		{
			"lang": "en",
			"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nexec: don't WARN for racy path_noexec check\n\nBoth i_mode and noexec checks wrapped in WARN_ON stem from an artifact\nof the previous implementation. They used to legitimately check for the\ncondition, but that got moved up in two commits:\n633fb6ac3980 (\"exec: move S_ISREG() check earlier\")\n0fd338b2d2cd (\"exec: move path_noexec() check earlier\")\n\nInstead of being removed said checks are WARN_ON'ed instead, which\nhas some debug value.\n\nHowever, the spurious path_noexec check is racy, resulting in\nunwarranted warnings should someone race with setting the noexec flag.\n\nOne can note there is more to perm-checking whether execve is allowed\nand none of the conditions are guaranteed to still hold after they were\ntested for.\n\nAdditionally this does not validate whether the code path did any perm\nchecking to begin with -- it will pass if the inode happens to be\nregular.\n\nKeep the redundant path_noexec() check even though it's mindless\nnonsense checking for guarantee that isn't given so drop the WARN.\n\nReword the commentary and do small tidy ups while here.\n\n[brauner: keep redundant path_noexec() check]"
		},
		{
			"lang": "es",
			"value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: exec: no WARN para comprobación atrevida de path_noexec Tanto las comprobaciones i_mode como noexec envueltas en WARN_ON provienen de un artefacto de la implementación anterior. Solían comprobar legítimamente la condición, pero eso se movió hacia arriba en dos confirmaciones: 633fb6ac3980 (\"exec: mover la comprobación S_ISREG() antes\") 0fd338b2d2cd (\"exec: mover la comprobación path_noexec() antes\") En lugar de eliminarse, dichas comprobaciones se WARN_ON, lo que tiene algún valor de depuración. Sin embargo, la comprobación falsa path_noexec es atrevida, lo que resulta en advertencias injustificadas si alguien se apresura a configurar el indicador noexec. Se puede notar que hay más para comprobar si se permite execve y no se garantiza que ninguna de las condiciones siga siendo válida después de que se probaron. Además, esto no valida si la ruta del código realizó alguna verificación de permisos para comenzar; pasará si el inodo resulta ser regular. Mantenga la verificación redundante path_noexec() aunque sea una verificación sin sentido de garantía que no se proporciona, así que elimine la ADVERTENCIA. Reformule el comentario y haga pequeñas correcciones mientras esté aquí. [brauner: mantenga la verificación redundante path_noexec()]"
		}
	],
	"references": [
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/0d196e7589cefe207d5d41f37a0a28a1fdeeb7c6"
		},
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/d62ba2a5536df83473a2ac15ab302258e3845251"
		}
	],
	"metrics": {}
}
