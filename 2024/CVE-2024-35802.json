{
	"id": "CVE-2024-35802",
	"sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
	"vulnStatus": "Awaiting Analysis",
	"published": "2024-05-17T14:15:13.067",
	"lastModified": "2024-05-17T18:35:35.070",
	"descriptions": [
		{
			"lang": "en",
			"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nx86/sev: Fix position dependent variable references in startup code\n\nThe early startup code executes from a 1:1 mapping of memory, which\ndiffers from the mapping that the code was linked and/or relocated to\nrun at. The latter mapping is not active yet at this point, and so\nsymbol references that rely on it will fault.\n\nGiven that the core kernel is built without -fPIC, symbol references are\ntypically emitted as absolute, and so any such references occuring in\nthe early startup code will therefore crash the kernel.\n\nWhile an attempt was made to work around this for the early SEV/SME\nstartup code, by forcing RIP-relative addressing for certain global\nSEV/SME variables via inline assembly (see snp_cpuid_get_table() for\nexample), RIP-relative addressing must be pervasively enforced for\nSEV/SME global variables when accessed prior to page table fixups.\n\n__startup_64() already handles this issue for select non-SEV/SME global\nvariables using fixup_pointer(), which adjusts the pointer relative to a\n`physaddr` argument. To avoid having to pass around this `physaddr`\nargument across all functions needing to apply pointer fixups, introduce\na macro RIP_RELATIVE_REF() which generates a RIP-relative reference to\na given global variable. It is used where necessary to force\nRIP-relative accesses to global variables.\n\nFor backporting purposes, this patch makes no attempt at cleaning up\nother occurrences of this pattern, involving either inline asm or\nfixup_pointer(). Those will be addressed later.\n\n  [ bp: Call it \"rip_rel_ref\" everywhere like other code shortens\n    \"rIP-relative reference\" and make the asm wrapper __always_inline. ]"
		},
		{
			"lang": "es",
			"value": "En el kernel de Linux, se resolvió la siguiente vulnerabilidad: x86/sev: corregidas las referencias de variables dependientes de la posición en el código de inicio. El código de inicio temprano se ejecuta desde una asignación de memoria 1:1, que difiere de la asignación a la que se vinculó el código y/. o reubicado para correr. Esta última asignación aún no está activa en este momento, por lo que las referencias de símbolos que dependen de ella fallarán. Dado que el kernel principal está construido sin -fPIC, las referencias a símbolos generalmente se emiten como absolutas, por lo que cualquier referencia de este tipo que ocurra en el código de inicio temprano bloqueará el kernel. Si bien se intentó solucionar este problema en el código de inicio inicial de SEV/SME, forzando el direccionamiento relativo a RIP para ciertas variables globales de SEV/SME mediante un ensamblaje en línea (consulte snp_cpuid_get_table(), por ejemplo), el direccionamiento relativo a RIP debe ser omnipresente. aplicado para las variables globales SEV/SME cuando se accede a ellas antes de las correcciones de la tabla de páginas. __startup_64() ya maneja este problema para variables globales seleccionadas que no son SEV/SME usando fixup_pointer(), que ajusta el puntero en relación con un argumento `physaddr`. Para evitar tener que pasar este argumento `physaddr` entre todas las funciones que necesitan aplicar correcciones de puntero, introduzca una macro RIP_RELATIVE_REF() que genera una referencia relativa a RIP a una variable global determinada. Se utiliza cuando es necesario para forzar accesos relativos a RIP a variables globales. Para fines de backport, este parche no intenta limpiar otras apariciones de este patrón, que involucran inline asm o fixup_pointer(). Estos se abordarán más adelante. [bp: llámelo \"rip_rel_ref\" en todas partes, como otros códigos acortan la \"referencia relativa a rIP\" y hacen que el contenedor ASM sea __always_inline. ]"
		}
	],
	"references": [
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/0982fd6bf0b822876f2e93ec782c4c28a3f85535"
		},
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/1c811d403afd73f04bde82b83b24c754011bd0e8"
		},
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/66fa3fcb474b2b892fe42d455a6f7ec5aaa98fb9"
		},
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/954a4a87814465ad61cc97c1cd3de1525baaaf07"
		},
		{
			"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
			"url": "https://git.kernel.org/stable/c/fe272b61506bb1534922ef07aa165fd3c37a6a90"
		}
	],
	"metrics": {}
}
