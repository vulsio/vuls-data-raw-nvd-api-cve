{
	"id": "CVE-2024-47062",
	"sourceIdentifier": "security-advisories@github.com",
	"vulnStatus": "Awaiting Analysis",
	"published": "2024-09-20T19:15:16.760",
	"lastModified": "2024-09-26T13:32:55.343",
	"descriptions": [
		{
			"lang": "en",
			"value": "Navidrome is an open source web-based music collection server and streamer. Navidrome automatically adds parameters in the URL to SQL queries. This can be exploited to access information by adding parameters like `password=...` in the URL (ORM Leak). Furthermore, the names of the parameters are not properly escaped, leading to SQL Injections. Finally, the username is used in a `LIKE` statement, allowing people to log in with `%` instead of their username. When adding parameters to the URL, they are automatically included in an SQL `LIKE` statement (depending on the parameter's name). This allows attackers to potentially retrieve arbitrary information. For example, attackers can use the following request to test whether some encrypted passwords start with `AAA`. This results in an SQL query like `password LIKE 'AAA%'`, allowing attackers to slowly brute-force passwords. When adding parameters to the URL, they are automatically added to an SQL query. The names of the parameters are not properly escaped. This behavior can be used to inject arbitrary SQL code (SQL Injection). These vulnerabilities can be used to leak information and dump the contents of the database and have been addressed in release version 0.53.0. Users are advised to upgrade. There are no known workarounds for this vulnerability."
		},
		{
			"lang": "es",
			"value": "Navidrome es un servidor y transmisor de música de código abierto basado en la web. Navidrome agrega automáticamente parámetros en la URL a las consultas SQL. Esto se puede explotar para acceder a la información agregando parámetros como `password=...` en la URL (filtración de ORM). Además, los nombres de los parámetros no se escapan correctamente, lo que lleva a inyecciones SQL. Finalmente, el nombre de usuario se usa en una declaración `LIKE`, lo que permite a las personas iniciar sesión con `%` en lugar de su nombre de usuario. Al agregar parámetros a la URL, se incluyen automáticamente en una declaración SQL `LIKE` (según el nombre del parámetro). Esto permite a los atacantes recuperar potencialmente información arbitraria. Por ejemplo, los atacantes pueden usar la siguiente solicitud para probar si algunas contraseñas cifradas comienzan con `AAA`. Esto da como resultado una consulta SQL como `password LIKE 'AAA%'`, lo que permite a los atacantes forzar lentamente las contraseñas. Al agregar parámetros a la URL, se agregan automáticamente a una consulta SQL. Los nombres de los parámetros no se escapan correctamente. Este comportamiento se puede utilizar para inyectar código SQL arbitrario (inyección SQL). Estas vulnerabilidades se pueden utilizar para filtrar información y volcar el contenido de la base de datos y se han solucionado en la versión 0.53.0. Se recomienda a los usuarios que actualicen la versión. No se conocen workarounds para esta vulnerabilidad."
		}
	],
	"references": [
		{
			"source": "security-advisories@github.com",
			"url": "https://github.com/navidrome/navidrome/security/advisories/GHSA-58vj-cv5w-v4v6"
		}
	],
	"metrics": {
		"cvssMetricV40": [
			{
				"source": "security-advisories@github.com",
				"type": "Secondary",
				"cvssData": {
					"version": "4.0",
					"vectorString": "CVSS:4.0/AV:N/AC:L/AT:N/PR:L/UI:N/VC:H/VI:H/VA:H/SC:H/SI:H/SA:L/E:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MAT:X/MPR:X/MUI:X/MVC:X/MVI:X/MVA:X/MSC:X/MSI:X/MSA:X/S:X/AU:X/R:X/V:X/RE:X/U:X",
					"baseScore": 9.4,
					"baseSeverity": "CRITICAL",
					"attackVector": "NETWORK",
					"attackComplexity": "LOW",
					"attackRequirements": "NONE",
					"privilegesRequired": "LOW",
					"userInteraction": "NONE",
					"vulnerableSystemConfidentiality": "HIGH",
					"vulnerableSystemIntegrity": "HIGH",
					"vulnerableSystemAvailability": "HIGH",
					"subsequentSystemConfidentiality": "HIGH",
					"subsequentSystemIntegrity": "HIGH",
					"subsequentSystemAvailability": "LOW",
					"exploitMaturity": "NOT_DEFINED",
					"confidentialityRequirements": "NOT_DEFINED",
					"integrityRequirements": "NOT_DEFINED",
					"availabilityRequirements": "NOT_DEFINED",
					"modifiedAttackVector": "NOT_DEFINED",
					"modifiedAttackComplexity": "NOT_DEFINED",
					"modifiedAttackRequirements": "NOT_DEFINED",
					"modifiedPrivilegesRequired": "NOT_DEFINED",
					"modifiedUserInteraction": "NOT_DEFINED",
					"modifiedVulnerableSystemConfidentiality": "NOT_DEFINED",
					"modifiedVulnerableSystemIntegrity": "NOT_DEFINED",
					"modifiedVulnerableSystemAvailability": "NOT_DEFINED",
					"modifiedSubsequentSystemConfidentiality": "NOT_DEFINED",
					"modifiedSubsequentSystemIntegrity": "NOT_DEFINED",
					"modifiedSubsequentSystemAvailability": "NOT_DEFINED",
					"safety": "NOT_DEFINED",
					"automatable": "NOT_DEFINED",
					"providerUrgency": "NOT_DEFINED",
					"recovery": "NOT_DEFINED",
					"valueDensity": "NOT_DEFINED",
					"vulnerabilityResponseEffort": "NOT_DEFINED"
				}
			}
		]
	},
	"weaknesses": [
		{
			"source": "security-advisories@github.com",
			"type": "Secondary",
			"description": [
				{
					"lang": "en",
					"value": "CWE-89"
				}
			]
		}
	]
}
